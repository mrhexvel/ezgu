generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model HoursLog {
    id        String   @id @default(cuid())
    hours     Int
    note      String?  @db.Text
    createdAt DateTime @default(now())

    user        User    @relation(fields: [userId], references: [id])
    userId      String
    project     Project @relation(fields: [projectId], references: [id])
    projectId   String
    awardedBy   User    @relation("AwardedHours", fields: [awardedById], references: [id])
    awardedById String
}

model User {
    id               String    @id @default(cuid())
    name             String
    email            String    @unique
    password         String
    role             Role      @default(VOLUNTEER)
    avatar           String?
    bio              String?   @db.Text
    location         String?
    interests        Json?
    hours            Int       @default(0)
    level            Int       @default(1)
    points           Int       @default(0)
    resetToken       String?
    resetTokenExpiry DateTime?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    projects            ProjectParticipant[]
    achievements        UserAchievement[]
    sentInvitations     ProjectInvitation[]  @relation("InvitedBy")
    receivedInvitations ProjectInvitation[]  @relation("InvitedUser")
    hoursLogs           HoursLog[]
    awardedHours        HoursLog[]           @relation("AwardedHours")
}

enum Role {
    ADMIN
    ORGANIZER
    VOLUNTEER
}

model Category {
    id          String   @id @default(cuid())
    name        String
    slug        String   @unique
    description String?  @db.Text
    icon        String?
    color       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    projects Project[]
}

model Project {
    id          String        @id @default(cuid())
    title       String
    slug        String        @unique
    description String        @db.Text
    image       String?
    location    String
    startDate   DateTime
    endDate     DateTime?
    status      ProjectStatus @default(UPCOMING)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    category     Category             @relation(fields: [categoryId], references: [id])
    categoryId   String
    participants ProjectParticipant[]
    invitations  ProjectInvitation[]
    hoursLogs    HoursLog[]
}

enum ProjectStatus {
    UPCOMING
    ACTIVE
    COMPLETED
    CANCELLED
}

model ProjectParticipant {
    id          String            @id @default(cuid())
    hours       Int               @default(0)
    status      ParticipantStatus @default(REGISTERED)
    feedback    String?           @db.Text
    invitedById String?
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    user      User    @relation(fields: [userId], references: [id])
    userId    String
    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    @@unique([userId, projectId])
}

enum ParticipantStatus {
    REGISTERED
    CONFIRMED
    ATTENDED
    COMPLETED
    CANCELLED
    INVITED
}

model ProjectInvitation {
    id        String           @id @default(cuid())
    status    InvitationStatus @default(PENDING)
    message   String?          @db.Text
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    project     Project @relation(fields: [projectId], references: [id])
    projectId   String
    user        User    @relation("InvitedUser", fields: [userId], references: [id])
    userId      String
    invitedBy   User    @relation("InvitedBy", fields: [invitedById], references: [id])
    invitedById String

    @@unique([projectId, userId])
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    DECLINED
    EXPIRED
}

model Achievement {
    id          String   @id @default(cuid())
    title       String
    description String   @db.Text
    icon        String
    color       String?
    points      Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    users UserAchievement[]
}

model UserAchievement {
    id        String   @id @default(cuid())
    awardedAt DateTime @default(now())

    user          User        @relation(fields: [userId], references: [id])
    userId        String
    achievement   Achievement @relation(fields: [achievementId], references: [id])
    achievementId String

    @@unique([userId, achievementId])
}

model Story {
    id        String   @id @default(cuid())
    title     String
    slug      String   @unique
    content   String   @db.LongText
    image     String?
    featured  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model News {
    id        String   @id @default(cuid())
    title     String
    slug      String   @unique
    content   String   @db.LongText
    image     String?
    featured  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
